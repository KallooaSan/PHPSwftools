<?php

namespace SwfTools\Binary;

require_once dirname(__FILE__) . '/../../../../src/SwfTools/Binary/Swfrender.php';

/**
 * Test class for Swfrender.
 * Generated by PHPUnit on 2012-04-04 at 19:58:29.
 */
class SwfrenderTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Swfrender
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = Swfrender::load(new \SwfTools\Configuration());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers SwfTools\Binary\Swfrender::render
     * @todo Implement testRender().
     */
    public function testRender()
    {
        $flash = new \SwfTools\FlashFile(__DIR__ . '/../../../files/flashfile.swf');

        $dest_file = __DIR__ . '/../../../files/tmp.jpg';

        $this->object->render($flash, $dest_file, true);

        $sizes = getimagesize($dest_file);
        $this->assertTrue(file_exists($dest_file));

        unlink($dest_file);

        $this->assertEquals(1250, $sizes[0]);
        $this->assertEquals(580, $sizes[1]);

        $this->object->render($flash, $dest_file, false);

        $sizes = getimagesize($dest_file);
        $this->assertTrue(file_exists($dest_file));

        unlink($dest_file);

        $this->assertEquals(1250, $sizes[0]);
        $this->assertEquals(580, $sizes[1]);



        $fakeFlash = $this->getMock(
          '\SwfTools\FlashFile'
          , array('getPathname')
          , array(__DIR__ . '/../../../files/flashfile.swf')
        );

        /* @var $fakeFile \PHPUnit_Framework_MockObject_MockObject */

        $fakeFlash->expects($this->once())
          ->method('getPathname')
          ->will($this->returnValue('nofile'));

        try
        {
            $this->object->render($fakeFlash, $dest_file, true);
            $this->fail('Swfrender should file on an unexistent file');
        }
        catch (\SwfTools\Exception\RuntimeException $e)
        {

        }
    }

    /**
     * @covers SwfTools\Binary\Swfrender::load
     */
    public function testLoad()
    {
        $swfextract = Swfrender::load(new \SwfTools\Configuration());

        $this->assertInstanceOf('SwfTools\Binary\Swfrender', $swfextract);
    }

}
